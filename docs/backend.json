{
  "entities": {
    "Issue": { ... },
    "User": { ... },
    "FacilityKeyword": { ... },
    "ProductionLine": { ... }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com",
      "microsoft.com"
    ]
  },
  "firestore": {
    "rules": "rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    function isSignedIn() { return request.auth != null; }\n    function isOwner(userId) { return request.auth.uid == userId; }\n    function getUser(userId) { return get(/databases/$(database)/documents/users/$(userId)); }\n    function getUserData(userId) { return getUser(userId).data; }\n    function getUserRole(userId) { return getUserData(userId).role; }\n    function getUserPlan(userId) { return getUserData(userId).plan; }\n\n    function isAdmin() { return isSignedIn() && getUserRole(request.auth.uid) == 'admin'; }\n    function isSupervisor() { return isSignedIn() && (getUserRole(request.auth.uid) == 'supervisor' || isAdmin()); }\n    function isOperator() { return isSignedIn() && getUserRole(request.auth.uid) == 'operator'; }\n\n    function isSameOrg(newUserEmail) {\n      let adminEmail = getUserData(request.auth.uid).email;\n      let adminDomain = adminEmail.split('@')[1];\n      let newUserDomain = newUserEmail.split('@')[1];\n      return adminDomain == newUserDomain;\n    }\n\n    function userCount() {\n      // This is a placeholder. Firestore rules cannot query collections.\n      // True enforcement requires a counter managed by Cloud Functions.\n      // This rule will always return true for now.\n      return true;\n    }\n\n    function lineCount() {\n       // This is a placeholder. Firestore rules cannot query collections.\n      return true;\n    }\n\n     function canAddUser() {\n        let plan = getUserPlan(request.auth.uid);\n        // This is a placeholder as userCount() is a mock.\n        if (plan == 'starter') { return userCount() < 5; }\n        if (plan == 'standard') { return userCount() < 50; }\n        if (plan == 'pro') { return userCount() < 150; }\n        if (plan == 'enterprise') { return true; }\n        return false;\n    }\n\n    function canAddLine() {\n        let plan = getUserPlan(request.auth.uid);\n        // This is a placeholder as lineCount() is a mock.\n        if (plan == 'starter') { return lineCount() < 1; }\n        if (plan == 'standard') { return lineCount() < 5; }\n        if (plan == 'pro') { return lineCount() < 10; }\n        if (plan == 'enterprise') { return true; }\n        return false;\n    }\n\n    match /users/{userId} {\n      allow read: if isAdmin() || isOwner(userId);\n      allow write: if isAdmin();\n      // Combine org check and plan limit check\n      allow create: if isAdmin() && isSameOrg(request.resource.data.email) && canAddUser();\n      allow delete: if isAdmin();\n    }\n\n    match /issues/{issueId} {\n      allow read: if isSupervisor() || (isOperator() && resource.data.productionLineId == getUserData(request.auth.uid).productionLineId);\n      allow create: if isSignedIn();\n      allow update: if isSupervisor();\n      allow delete: if isAdmin();\n    }\n\n    match /productionLines/{lineId} {\n      allow read: if isSignedIn();\n      allow write: if isAdmin();\n      // Add plan limit check for creating lines\n      allow create: if isAdmin() && canAddLine();\n      allow delete: if isAdmin();\n    }\n\n    match /facilityKeywords/{keywordId} {\n      allow read: if isSignedIn();\n      allow write: if isAdmin();\n      allow create: if isAdmin();\n      allow delete: if isAdmin();\n    }\n  }\n}",
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": { "$ref": "#/backend/entities/User" },
          "description": "Stores user profiles. User ID is used for authentication.",
          "params": [{ "name": "userId", "description": "The unique identifier for the user." }]
        }
      },
      {
        "path": "/issues/{issueId}",
        "definition": {
          "entityName": "Issue",
          "schema": { "$ref": "#/backend/entities/Issue" },
          "description": "Stores all reported issues.",
          "params": [{ "name": "issueId", "description": "The unique identifier for the issue." }]
        }
      },
      {
        "path": "/productionLines/{lineId}",
        "definition": {
          "entityName": "ProductionLine",
          "schema": { "$ref": "#/backend/entities/ProductionLine" },
          "description": "Stores all production lines.",
          "params": [{ "name": "lineId", "description": "The unique identifier for the production line." }]
        }
      },
      {
        "path": "/facilityKeywords/{keywordId}",
        "definition": {
          "entityName": "FacilityKeyword",
          "schema": { "$ref": "#/backend/entities/FacilityKeyword" },
          "description": "Stores facility keywords.",
          "params": [{ "name": "keywordId", "description": "The unique identifier for the facility keyword." }]
        }
      }
    ]
  }
}
