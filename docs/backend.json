
{
  "rules": "rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // ---------- Helper Functions ----------\n    function isSignedIn() { return request.auth != null; }\n    function isOwner(userId) { return request.auth.uid == userId; }\n\n    function getUser(userId) {\n      return get(/databases/$(database)/documents/users/$(userId));\n    }\n    function getUserData(userId) { return getUser(userId).data; }\n    function getUserRole(userId) { return getUserData(userId).role; }\n    function getUserPlan(userId) { return getUserData(userId).plan; }\n    function getUserOrg(userId) { return getUserData(userId).orgId; }\n\n    function isAdmin() { return isSignedIn() && getUserRole(request.auth.uid) == 'admin'; }\n    function isSupervisor() { return isSignedIn() && (getUserRole(request.auth.uid) == 'supervisor' || isAdmin()); }\n    function isOperator() { return isSignedIn() && getUserRole(request.auth.uid) == 'operator'; }\n\n    function isSameOrg(newUserEmail) {\n      let adminEmail = getUserData(request.auth.uid).email;\n      let adminDomain = adminEmail.split('@')[1];\n      let newUserDomain = newUserEmail.split('@')[1];\n      return adminDomain == newUserDomain;\n    }\n\n    // ---------- Plan Checks Using Stats ----------\n    function canAddUser(orgId) {\n      let plan = getUserPlan(request.auth.uid);\n      let stats = get(/databases/$(database)/documents/stats/$(orgId)).data;\n\n      return plan == 'starter' ? stats.userCount < 5\n           : plan == 'standard' ? stats.userCount < 50\n           : plan == 'pro' ? stats.userCount < 150\n           : plan == 'enterprise' ? true\n           : false;\n    }\n\n    function canAddLine(orgId) {\n      let plan = getUserPlan(request.auth.uid);\n      let stats = get(/databases/$(database)/documents/stats/$(orgId)).data;\n\n      return plan == 'starter' ? stats.lineCount < 1\n           : plan == 'standard' ? stats.lineCount < 5\n           : plan == 'pro' ? stats.lineCount < 10\n           : plan == 'enterprise' ? true\n           : false;\n    }\n\n    // ---------- Collections ----------\n    match /users/{userId} {\n      allow read: if isAdmin() || isOwner(userId);\n      allow write: if isAdmin() || isOwner(userId); // Allow users to update their own profile\n      allow create: if isOwner(userId) // Allow a user to create their own document\n                    || (isAdmin() \n                        && isSameOrg(request.resource.data.email)\n                        && canAddUser(getUserOrg(request.auth.uid)));\n      allow delete: if isAdmin();\n    }\n\n    match /issues/{issueId} {\n      allow read: if isSupervisor()\n                   || (isOperator()\n                       && resource.data.productionLineId == getUserData(request.auth.uid).productionLineId);\n      allow create: if isSignedIn();\n      allow update: if isSupervisor();\n      allow delete: if isAdmin();\n    }\n\n    match /productionLines/{lineId} {\n      allow read: if isSignedIn();\n      allow write: if isAdmin();\n      allow create: if isAdmin() && canAddLine(getUserOrg(request.auth.uid));\n      allow delete: if isAdmin();\n    }\n\n    match /facilityKeywords/{keywordId} {\n      allow read: if isSignedIn();\n      allow write: if isAdmin();\n      allow create: if isAdmin();\n      allow delete: if isAdmin();\n    }\n\n    // Stats documents should only be updated by Cloud Functions\n    match /stats/{orgId} {\n      allow read: if isAdmin();\n      allow write: if false; // Prevent direct client writes\n    }\n  }\n}\n",
  "functions": "const functions = require(\"firebase-functions/v2\");\nconst admin = require(\"firebase-admin\");\n\nadmin.initializeApp();\nconst db = admin.firestore();\n\n// Helper: increment stats safely\nasync function updateCounter(orgId, field, incrementBy) {\n  const ref = db.doc(`stats/${orgId}`);\n  await db.runTransaction(async (t) => {\n    const doc = await t.get(ref);\n    if (!doc.exists) {\n      // Initialize stats doc if missing\n      t.set(ref, { userCount: 0, lineCount: 0 }, { merge: true });\n    }\n    t.update(ref, {\n      [field]: admin.firestore.FieldValue.increment(incrementBy),\n    });\n  });\n}\n\n// ---------------- USERS ----------------\nexports.onUserCreate = functions.firestore\n  .document(\"users/{userId}\")\n  .onCreate(async (snap) => {\n    const data = snap.data();\n    if (data.orgId) {\n      await updateCounter(data.orgId, \"userCount\", 1);\n    }\n  });\n\nexports.onUserDelete = functions.firestore\n  .document(\"users/{userId}\")\n  .onDelete(async (snap) => {\n    const data = snap.data();\n    if (data.orgId) {\n      await updateCounter(data.orgId, \"userCount\", -1);\n    }\n  });\n\n// ---------------- PRODUCTION LINES ----------------\nexports.onLineCreate = functions.firestore\n  .document(\"productionLines/{lineId}\")\n  .onCreate(async (snap) => {\n    const data = snap.data();\n    if (data.orgId) {\n      await updateCounter(data.orgId, \"lineCount\", 1);\n    }\n  });\n\nexports.onLineDelete = functions.firestore\n  .document(\"productionLines/{lineId}\")\n  .onDelete(async (snap) => {\n    const data = snap.data();\n    if (data.orgId) {\n      await updateCounter(data.orgId, \"lineCount\", -1);\n    }\n  });\n\n"
}
