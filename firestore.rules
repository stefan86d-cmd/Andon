rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ðŸ”’ Helper function: Checks if a user belongs to the same organization
    function isUserInOrg(orgId) {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgId == orgId;
    }
    
    // ðŸ”’ Helper function: Checks if the user is an admin in their organization
    function isAdmin() {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // ðŸ”’ Helper function: Checks if the user is a supervisor or admin
    function isSupervisorOrAdmin() {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'supervisor'];
    }

    // ===== USERS COLLECTION =====
    match /users/{userId} {
      // Allow a user to create their own user document
      // This is crucial for the sign-up process.
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to read or update only their own profile
      allow read, update: if request.auth != null && request.auth.uid == userId;
      
      // Admins can manage users within their own organization
      allow list, delete: if isAdmin() && isUserInOrg(get(/databases/$(database)/documents/users/$(userId)).data.orgId);
    }

    // ===== PRODUCTION LINES =====
    match /productionLines/{lineId} {
      // Only admins can create, edit, or delete production lines
      allow create, update, delete: if isAdmin() &&
                                     request.resource.data.orgId != null &&
                                     isUserInOrg(request.resource.data.orgId);

      // Anyone in the organization can read the production line data
      allow read: if request.auth != null &&
                   resource.data.orgId != null &&
                   isUserInOrg(resource.data.orgId);
    }

    // ===== ISSUES =====
    match /issues/{issueId} {
      // Any authenticated user in the organization can create an issue
      allow create: if request.auth != null &&
                      request.resource.data.orgId != null &&
                      isUserInOrg(request.resource.data.orgId);

      // Any authenticated user in the organization can read issues
      allow read: if request.auth != null &&
                   resource.data.orgId != null &&
                   isUserInOrg(resource.data.orgId);
                   
      // Only admins or supervisors can update an issue
      allow update: if isSupervisorOrAdmin() &&
                       resource.data.orgId != null &&
                       isUserInOrg(resource.data.orgId);
      
      // Prevent deletion of issues to maintain a historical record
      allow delete: if false;
    }

    // ===== FALLBACK (for unlisted collections) =====
    match /{document=**} {
      allow read, write: if false; // everything else is denied explicitly
    }
  }
}
