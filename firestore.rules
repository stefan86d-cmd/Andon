rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check if a user belongs to a specific org
    function isUserInOrg(userId, orgId) {
      return getUserData(userId).orgId == orgId;
    }
    
    // Helper function to check the user's role
    function isUserRole(userId, role) {
      return getUserData(userId).role == role;
    }

    // Users can read/update their own data. Admins can read/update any user in their org.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId ||
                           (isUserRole(request.auth.uid, 'admin') && isUserInOrg(request.auth.uid, getUserData(userId).orgId));
      allow create: if request.auth.uid != null; // Allow any authenticated user to create their own profile document
    }

    // Production lines can be read by anyone in the same org. Only admins can modify.
    match /productionLines/{lineId} {
      allow read: if request.auth.uid != null && isUserInOrg(request.auth.uid, resource.data.orgId);
      allow create, update, delete: if request.auth.uid != null && isUserRole(request.auth.uid, 'admin');
    }

    // Issues can be read by anyone in the org.
    // Issues can be created by any authenticated user in the org.
    // Issues can be updated/resolved by admins or supervisors.
    match /issues/{issueId} {
      allow read: if request.auth.uid != null && isUserInOrg(request.auth.uid, resource.data.orgId);
      allow create: if request.auth.uid != null && request.resource.data.orgId == getUserData(request.auth.uid).orgId;
      allow update: if request.auth.uid != null && (isUserRole(request.auth.uid, 'admin') || isUserRole(request.auth-uid, 'supervisor')) && isUserInOrg(request.auth.uid, resource.data.orgId);
      allow delete: if false; // Disallow deleting issues for data integrity
    }
  }
}
