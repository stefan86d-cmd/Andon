rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper functions ---
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isUserInOrg(userId, orgId) {
      return getUserData(userId).orgId == orgId;
    }
    
    function isUserRole(userId, role) {
      return getUserData(userId).role == role;
    }

    // --- USERS COLLECTION ---
    match /users/{userId} {
      // Allow a new authenticated user to create their own profile after signing up
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to read or update their own profile
      allow read, update: if request.auth.uid == userId;

      // Allow admins to read or update any user within their org
      allow read, update: if isUserRole(request.auth.uid, 'admin') &&
                           isUserInOrg(request.auth.uid, getUserData(userId).orgId);
    }

    // --- PRODUCTION LINES COLLECTION ---
    match /productionLines/{lineId} {
      // Any authenticated user in the same org can read
      allow read: if request.auth != null && isUserInOrg(request.auth.uid, resource.data.orgId);
      
      // Only admins can modify production lines
      allow create, update, delete: if request.auth != null && isUserRole(request.auth.uid, 'admin');
    }

    // --- ISSUES COLLECTION ---
    match /issues/{issueId} {
      // Any authenticated user in the same org can read issues
      allow read: if request.auth != null && isUserInOrg(request.auth.uid, resource.data.orgId);
      
      // Any authenticated user can create an issue for their own org
      allow create: if request.auth != null && request.resource.data.orgId == getUserData(request.auth.uid).orgId;
      
      // Admins and supervisors can update issues in their org
      allow update: if request.auth != null &&
                    (isUserRole(request.auth.uid, 'admin') || isUserRole(request.auth.uid, 'supervisor')) &&
                    isUserInOrg(request.auth.uid, resource.data.orgId);

      // Deleting issues is not allowed for data integrity
      allow delete: if false;
    }
  }
}
