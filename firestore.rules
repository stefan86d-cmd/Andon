/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of ownership and role-based access control for a factory issue tracking application.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owner.
 * - /issues/{issueId}: Stores reported issues. Public read, owner-only create/update/delete.
 * - /productionLines/{lineId}: Stores production line information. Public read, owner-only create/update/delete.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Issues and ProductionLines are publicly readable, but only authenticated users can create, update, or delete them.
 * - Ownership of Issues and ProductionLines is based on the `reportedBy`/`id` (for Issue) or `id` (for ProductionLine) field matching the authenticated user's UID.
 *
 * Denormalization for Authorization:
 * - Issues: Enforce that `reportedBy` matches the user's UID on creation.
 * - ProductionLines: Enforce that `id` matches the user's UID on creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public reading of issues, but restricts creation, updating, and deletion to the issue reporter.
     * @path /issues/{issueId}
     * @allow (get) Any user can read any issue.
     * @allow (list) Any user can list issues.
     * @allow (create) User with ID 'user123' can create an issue with reportedBy 'user123'.
     * @allow (update) User with ID 'user123' can update an issue where resource.data.reportedBy == 'user123'.
     * @allow (delete) User with ID 'user123' can delete an issue where resource.data.reportedBy == 'user123'.
     * @deny (create) User with ID 'user456' cannot create an issue with reportedBy 'user123'.
     * @deny (update) User with ID 'user456' cannot update an issue where resource.data.reportedBy == 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete an issue where resource.data.reportedBy == 'user123'.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /issues/{issueId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(reportedBy) {
        return request.auth != null && request.auth.uid == reportedBy;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.reportedBy == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.reportedBy) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.reportedBy) && resource != null;
    }

    /**
     * @description Allows public reading of production lines, but restricts creation, updating, and deletion to authenticated users.
     * @path /productionLines/{lineId}
     * @allow (get) Any user can read any production line.
     * @allow (list) Any user can list production lines.
     * @allow (create) User with ID 'user123' can create a production line with ID 'user123'.
     * @allow (update) User with ID 'user123' can update a production line with ID 'user123'.
     * @allow (delete) User with ID 'user123' can delete a production line with ID 'user123'.
     * @deny (create) User with ID 'user456' cannot create a production line with ID 'user123'.
     * @deny (update) User with ID 'user456' cannot update a production line with ID 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a production line with ID 'user123'.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /productionLines/{lineId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(lineId) {
        return request.auth != null && request.auth.uid == lineId;
      }
      
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(lineId) && resource != null;
      allow delete: if isSignedIn() && isOwner(lineId) && resource != null;
    }
  }
}