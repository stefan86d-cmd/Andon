/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict access control.
 * Users can only read and write their own data, while issues and production lines are publicly readable but only modifiable by authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. The 'userId' segment matches the authenticated user's UID.
 * - /issues/{issueId}: Stores reported issues. Publicly readable, but write access is restricted.
 * - /productionLines/{lineId}: Stores production lines. Publicly readable, but write access is restricted.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - The ruleset explicitly denies any write operations using 'if true;' as a condition.
 * - Missing owner fields in entities will halt the implementation and alert the developer to a critical security issue.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, list, update, delete) Signed-in user accesses their own profile.
     * @deny (create, get, list, update, delete) Any other user attempts to access this profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to issues.
     * @path /issues/{issueId}
     * @allow (get, list) Anyone can read the issues.
     * @deny (create, update, delete) Only authorized users can create, update, or delete issues.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /issues/{issueId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to production lines.
     * @path /productionLines/{lineId}
     * @allow (get, list) Anyone can read production lines.
     * @deny (create, update, delete) Only authorized users can create, update, or delete production lines.
     * @principle Allows public read access but restricts write access to authorized users.
     */
    match /productionLines/{lineId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}