rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isOrgMember() {
      // Check if the user is part of the organization they are trying to access
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgId == resource.data.orgId;
    }

    function isOrgAdmin() {
      // Check if the user is an admin of the organization
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             userDoc.data.role == 'admin' &&
             userDoc.data.orgId == resource.data.orgId;
    }
    
    function isOrgAdminByOrgId(orgId) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             userDoc.data.role == 'admin' &&
             userDoc.data.orgId == orgId;
    }

    match /users/{userId} {
      // Allow users to read and write to their own document
      allow read, update, delete: if isOwner(userId);
      // Allow new users to create their own document
      allow create: if isOwner(userId);
       // Allow admins to read user data within their own organization
      allow get: if isOrgAdminByOrgId(get(/databases/$(database)/documents/users/$(userId)).data.orgId);
    }
    
    match /users/{userId} {
      // Admins can list all users in their organization
      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    match /issues/{issueId} {
      // Org members can create issues
      allow create: if isOrgMember();
      // Org members can read issues
      allow get, list: if isOrgMember();
      // Admins and supervisors of the org can update and delete issues
      allow update, delete: if isOrgAdmin();
    }
    
    match /productionLines/{lineId} {
       // Org members can read production lines
      allow get, list: if isOrgMember();
      // Admins of the org can create, update, and delete lines
      allow create, update, delete: if isOrgAdmin();
    }

  }
}
