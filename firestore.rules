
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user's role and orgId from the 'users' collection
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow a user to read or update their own document
      allow read, update: if request.auth != null && request.auth.uid == userId;

      // Admins can read any user within their own organization
      allow get, list: if request.auth != null && getUserData(request.auth.uid).role == 'admin' && getUserData(request.auth.uid).orgId == resource.data.orgId;
      
      // Admins can create new users within their own organization
      allow create: if request.auth != null && getUserData(request.auth.uid).role == 'admin' && getUserData(request.auth.uid).orgId == request.resource.data.orgId;
    }

    // Rules for the 'issues' collection
    match /issues/{issueId} {
      // A user must be authenticated to access issues
      function isOwner(orgId) {
        return getUserData(request.auth.uid).orgId == orgId;
      }
      
      function isAdmin() {
        return getUserData(request.auth.uid).role == 'admin';
      }

      function isSupervisor() {
        return getUserData(request.auth.uid).role == 'supervisor';
      }
      
      function isOperator() {
          return getUserData(request.auth.uid).role == 'operator';
      }

      // Read access: Admins and Supervisors can read all issues in their org. Operators can read issues for their location.
      allow get, list: if request.auth != null && isOwner(resource.data.orgId) && (isAdmin() || isSupervisor() || isOperator());

      // Create access: Any authenticated user within the organization can create an issue.
      allow create: if request.auth != null && isOwner(request.resource.data.orgId);

      // Update access: Admins and Supervisors can update any issue in their org.
      allow update: if request.auth != null && isOwner(resource.data.orgId) && (isAdmin() || isSupervisor());
      
      // Delete access: Deny all deletes for now to preserve history.
      allow delete: if false;
    }
    
    // Rules for the 'productionLines' collection
    match /productionLines/{lineId} {
        
       function isOwner(orgId) {
        return getUserData(request.auth.uid).orgId == orgId;
      }
      
      function isAdmin() {
        return getUserData(request.auth.uid).role == 'admin';
      }

      // Read access: Any authenticated user in the org can read production lines.
      allow get, list: if request.auth != null && isOwner(resource.data.orgId);

      // Write access (create, update, delete): Only admins can manage production lines.
      allow write: if request.auth != null && isOwner(resource.data.orgId) && isAdmin();
    }
  }
}
