/**
 * @file Firestore Security Rules for Andon Assistant Application
 * @description This ruleset enforces a user-ownership model for user profiles and issues, with public read access to facility keywords.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /users/{userId}/issues/{issueId}: Stores issues reported or assigned to a specific user, accessible only to the user and authorized personnel.
 * - /facilityKeywords/{facilityKeywordId}: Stores keywords relevant to different facilities, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user profiles.
 * - Users can only manage issues reported by them or assigned to them.
 * - Facility keywords are publicly readable but not writable by clients.
 * - Listing of user documents is disallowed for privacy reasons.
 *
 * Denormalization for Authorization:
 * - To enforce ownership, the 'reportedBy' field in the 'Issue' entity should match the 'userId' in the path.
 *
 * Structural Segregation:
 * - Issues are stored as subcollections of users to easily enforce ownership and allow secure list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     * @allow (get) User with ID 'user123' can read their profile.
     * @allow (update) User with ID 'user123' can update their profile.
     * @allow (delete) User with ID 'user123' can delete their profile.
     * @deny (create) User with ID 'user123' cannot create a profile with a different ID 'user456'.
     * @deny (update) User with ID 'user123' cannot update the profile of another user 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete the profile of another user 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-ownership for issues within a user's profile.
     * @path /users/{userId}/issues/{issueId}
     * @allow (create) User 'user123' can create an issue under their profile.
     * @allow (get) User 'user123' can read an issue under their profile.
     * @allow (update) User 'user123' can update an issue under their profile.
     * @allow (delete) User 'user123' can delete an issue under their profile.
     * @deny (create) User 'user123' cannot create an issue under another user's profile ('user456').
     * @deny (get) User 'user123' cannot read an issue under another user's profile ('user456').
     * @deny (update) User 'user123' cannot update an issue under another user's profile ('user456').
     * @deny (delete) User 'user123' cannot delete an issue under another user's profile ('user456').
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId}/issues/{issueId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.reportedBy == userId;
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to facility keywords.
     * @path /facilityKeywords/{facilityKeywordId}
     * @allow (get) Any user can read a facility keyword.
     * @allow (list) Any user can list facility keywords.
     * @deny (create) No user can create a facility keyword.
     * @deny (update) No user can update a facility keyword.
     * @deny (delete) No user can delete a facility keyword.
     * @principle Allows public read access while restricting write access.
     */
    match /facilityKeywords/{facilityKeywordId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}